openapi: "3.0.0"
info:  
  version: 1.0.0
  title: Postman Modified Petstore API Definition
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Postman
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-postman-projectname: PostmanPetstore

paths:
  /pets:
    parameters:
      - name: GlobalParam
        in: query
        schema:
          type: string
      - name: GlobalCookie
        in: cookie
        schema:
          type: string
    get:
      description: |
        Returns all pets from the system that the user has access to
        Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
        Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
      operationId: findPets
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new pet in the store. Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        201:
          description: Pet was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    parameters:
      - name: id
        in: path
        description: ID of pet to work with in operations
        required: true
        schema:
          type: integer
          format: int64
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Replaces Pet with contents
      operationId: replacePet
      requestBody:
        description: Pet to replace with
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        200:
          description: Pet updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates Pet with contents
      operationId: UPDATEPET
      requestBody:
        description: Pet to update with
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stores:
    get:
      description: Retrieves contents of stores
      operationId: GetAllStores
      responses:
        200:
          description: Returns list of Store items
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                    typeOf:
                      type: string
                      enum: [Cat, Dog, Bird, Reptile]
                    tag:
                      type: string
                    value:
                      type: number
                      format: float
                      description: price
                    saleValue:
                      type: number
                      format: float
                      description: price if on sale
                    onSale:
                      type: boolean
                      default: false
                      description: True if item is on sale, false if not.
        400:
          description: No items found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Something went wrong on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stores/{id}:
    get:
      parameters:
        - name: id
          in: path
          description: ID of store to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stores/{id}/pets:
    get:
      parameters:
        - name: id
          in: path
          description: ID of store to fetch
          required: true
          schema:
            type: integer
            format: int64
      description: Retrieves contents of stores
      operationId: GetAllPetsForStoreById
      responses:
        200:
          description: Returns list of Store items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'

        400:
          description: No items found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Something went wrong on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pet:
      type: object
      description: A pet
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        typeOf:
          type: string
          enum: [Cat, Dog, Bird, Reptile]
        tag:
          type: string

    Pets:
      type: object
      properties:
        id:
            type: integer

    StoreItem:
      description: Single store item
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        typeOf:
          type: string
          enum: [ Cat, Dog, Bird, Reptile ]
        tag:
          type: string
        value:
          type: number
          format: float
          description: price
        saleValue:
          type: number
          format: float
          description: price if on sale
        onSale:
          type: boolean
          default: false
          description: True if item is on sale, false if not.

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
